####################################################################################################
##########                                     Фразы                                      ##########
####################################################################################################
#
# Файл для пользовательского указания фраз, на которые будет реагировать бот.
#
# Фразы задаются по следующим правилам:
#   - с помощью параметра file.[наименование переменной] = "путь к файлу"
#       В этом случае из [путь где лежит бот]/settings будет считан указанный файл, на каждую строку которого
#       бот будет отвечать следующей строкой этого файла.
#       На последнюю строку бот не отвечает.
#   - с помощью переменных этого файла:
#     phrase.[наименование переменной] = Фраза, КОТОРОЙ бот будет отвечать
#     phrase.[наименование переменной].map_[номер] = Фразы, НА КОТОРЫЕ бот будет отвечать
#       В этом случае бот будет отвечать фразой на любую из указанных для нее строк.
#       Пример:
#           phrase.hello = Привет, @USER_NAME
#           phrase.hello.map_1 = Привет
#           phrase.hello.map_2 = Скажи что-нибудь, глупый парсер
#           Бот ответит "Привет, @USER_NAME" на любую из двух указанных фраз,
#           @USER_NAME - заменяется на ник человека в том канале, куда отвечает бот
#
#   Поиск фраз для ответа идет по ключу [наименование переменной], которые отсортированы по возрастанию.
#   Если необходимо, чтобы одна фраза шла раньше другой, можно к переменной добавить #,
#   например phrase.#apple, или ~, чтобы фраза была последней, например phrase.~apple
#   Бот запоминает последнее сообщение и начанает поиск с этой фразы, если фраза не найдена, он
#   начинает поиск с начала всех фраз до того момента, где начинал поиск. Не найдя ответа в этом случае
#   отвечает фразой default.phrase
#   Таким образом можно создавать цепочки ответов, например:
#           phrase.hello_1 = Привет
#           phrase.hello_1.map_1 = Скажи что-нибудь, глупый парсер
#
#           phrase.hello_2 = Что?
#           phrase.hello_2.map_1 = Скажи что-нибудь, глупый парсер
#           На фразу "Скажи что-нибудь, глупый парсер" бот ответит hello_1, затем hello_2.
#
#   Поиск фразы идет по следующим правилам:
#       Сначала ищется строгое совпадение введеной фразы внутри строки с учетом регистра, затем строгое совпадение
#       внутри строки без учета регистра и в конце сравнивается количество каждого слова с количеством этого же
#       слова во фразе если оно не меньше этого значения.
#

default.phrase = 💩

file.#green_elefant = scenario.txt

phrase.hello = \
  Здраститя!

phrase.apple_on_plate = \
  ЭХ 🍎 ДА НА 🍽
phrase.apple_on_plate.map_1 = Песню давай!
phrase.apple_on_plate.map_2 = Спой песню!

phrase.take_a_crap = \
  Ну что, срать? Мягенько

phrase.crap = \
  |                                                                  |\n\
  |                                                                  |\n\
  |                                                           🐝|\n\
  |                                                    🐝 💩|\n\
  |-----------------------------------------|
phrase.crap.map_1 = Насри в чат!

phrase.question = \
  Так сказать, новым владельцем нашей хавки планеты, он следующим квартирантам, а нам скажут: \
  "Пожалуйте нахуй, срок ренты закончился". И если.

phrase.is_that_a_joke = \
  Это, значит так, шутка чтоли, блядь? \
  Во-первых, шутят здесь только два человека, с помощью третьего человека - ассисента. \
  ВЫ, БЛЯДЬ, МНЕ ТУТ НЕ ШУТИТЕ СО МНОЙ! ЧЕ ТЫ ХУЙНЮ ПИШЕШЬ? МУДИЛА! МУДАК! МУДИЛА! \
  ХУЛИ ТЫ, БЛЯДЬ, УМИШКО СВОЙ КУЦЫЙ ПОКАЗЫВАЕШЬ, БЛЯДЬ? КОМУ ПОКАЗЫВАЕШЬ УМИШКО?
phrase.is_that_a_joke.map_1 = Так сказать, новым владельцем нашей хавки планеты, он следующим квартирантам, а нам скажут: \
  "Пожалуйте нахуй, срок ренты закончился". И если.
phrase.is_that_a_joke.map_2 = Редедя

phrase.meteor = \
  ШАНДАРАХНУЛ, БЛЯДЬ, СВЕРХУ, ЕПТА! СОСУЛЯМИ, БЛЯДЬ, ВСЮ РОССИЮ, СОСУЛЯМИ ПОУБИВАЛО, \
  А ТУТ ЕЩЕ ХЕРОВАЯ, БЛЯДЬ, ОГНЕННАЯ СОСУЛЯ ТЕБЕ - ЕБЛЫСТЬ, БЛЯДЬ, ЕБЛЫСЬ, БЛЯДЬ, \
  ПО МАКИТРЕ, БЛЯДЬ, ПО ЧАКРЕ, НАХУЙ, ПО ЧАКРЕ, БЛЯДЬ, ПО ЧАКРЕ, БЛЯДЬ, ПО ЧАКРЕ!
phrase.meteor.map_1 = Куда метеор ударил?
phrase.meteor.map_2 = Что взволновало-то тебя?

phrase.advice = \
  Во-первых, объяви УЛЬТИМА ТУЛЕ телевизору. \
  Читай только надписи, которые развешивают НА АСФАЛЬТЕ, СПЕЦИАЛЬНО, с помощью развешивают спрея и трафарета, \
  что там есть телефончик одной ЯСНО-видящей, то есть ЯСНО видит, понимаешь, \
  глаза у нее от водки уже проблесковые маячки, а не глаза. Понимаешь? УЛЬТИМА ТУЛЕ объяви телевизеру! УЛЬТИМА ТУЛЕ телевизеру!
phrase.advice.map_1 = Дай совет!
phrase.advice.map_2 = Посоветуй что-нибудь
phrase.advice.map_3 = Не является ли сие предтечей апокалипсиса?

phrase.what_is_chelo = \
  Блядь, ты пойми, что такое слово ЧЕЛО, сначала, тогда поймешь, блядь, \
  что ПО ЕБАЛУ ДАЛО, БЛЯДЬ, ПО ЧЕЛУ, БЛЯДЬ, ПО МАКИТРЕ! \
  ТЕБЕ, БЛЯДЬ, ПОЛ ЧАСА МУДАКУ ОБЪЯСНЯЮ, БЛЯДЬ, ПО ЧЕЛУ, БЛЯДЬ, ПО ЧЕЛУ, ЧЕЛОБИТНАЯ ДУРИЛА, БЛЯДЬ! ХУЙ МОРЖОВЫЙ!
phrase.what_is_chelo.map_1 = Что такое чело?
phrase.what_is_chelo.map_2 =  Объясни мне, что есть чело
phrase.what_is_chelo.map_3 =  Почему именно по Челябинску? Что сие знамение означает?

phrase.help = Здраститя! Пиши мне, а я тебе насру.\n\
  Напиши: "/sl спой песню!". Либо можешь позвать меня: "@Запрс не веный насри в чат!"\n\
  Либо пиши любой другой диалог.\n\
  Также можешь спросиль у меня совет ("дай совет", "посоветуй что-нибудь" и т.д.), \
  узнать новое слово ("что такое чело?", "объясни мне, что есть чело" и т.д.), про метеор, или еще чего.\n\
  Ну давай, я жду, епта!









