####################################################################################################
##########                                     Фразы                                      ##########
####################################################################################################
#
# Файл для пользовательского указания фраз, на которые будет реагировать бот.
#
# Фразы задаются по следующим правилам:
#   - с помощью параметра file.[наименование переменной] = "путь к файлу"
#       В этом случае из [путь где лежит бот]/settings будет считан указанный файл, на каждую строку которого
#       бот будет отвечать следующей строкой этого файла.
#       На последнюю строку бот не отвечает.
#   - с помощью переменных этого файла:
#     phrase.[наименование переменной] = Фраза, КОТОРОЙ бот будет отвечать
#     phrase.[наименование переменной].map_[номер] = Фразы, НА КОТОРЫЕ бот будет отвечать
#       В этом случае бот будет отвечать фразой на любую из указанных для нее строк.
#       Пример:
#           phrase.hello = Привет, @USER_NAME
#           phrase.hello.map_1 = Привет
#           phrase.hello.map_2 = Скажи что-нибудь, глупый парсер
#           Бот ответит "Привет, @USER_NAME" на любую из двух указанных фраз,
#           @USER_NAME - заменяется на ник человека в том канале, куда отвечает бот
#
#   Поиск фраз для ответа идет по ключу [наименование переменной], которые отсортированы по возрастанию.
#   Если необходимо, чтобы одна фраза шла раньше другой, можно к переменной добавить #,
#   например phrase.#apple, или ~, чтобы фраза была последней, например phrase.~apple
#   Бот запоминает последнее сообщение и начанает поиск с этой фразы, если фраза не найдена, он
#   начинает поиск с начала всех фраз до того момента, где начинал поиск. Не найдя ответа в этом случае
#   отвечает фразой default.phrase
#   Таким образом можно создавать цепочки ответов, например:
#           phrase.hello_1 = Привет
#           phrase.hello_1.map_1 = Скажи что-нибудь, глупый парсер
#
#           phrase.hello_2 = Что?
#           phrase.hello_2.map_1 = Скажи что-нибудь, глупый парсер
#           На фразу "Скажи что-нибудь, глупый парсер" бот ответит hello_1, затем hello_2.
#
#   Поиск фразы идет по следующим правилам:
#       Сначала ищется строгое совпадение введеной фразы внутри строки с учетом регистра, затем строгое совпадение
#       внутри строки без учета регистра и в конце сравнивается количество каждого слова с количеством этого же
#       слова во фразе если оно не меньше этого значения.
#

default.phrase = 💩

file.#some_file = scenario.txt

phrase.apple_on_plate = \
  ЭХ 🍎 ДА НА 🍽
phrase.apple_on_plate.map_1 = Песню давай!
phrase.apple_on_plate.map_2 = Спой песню!









